---
import DockerIcon from '@components/icons/dev/DockerIcon.astro';
import NextJS from '@components/icons/dev/NextJS.astro';
import PostgreSQL from '@components/icons/dev/PostgreSQL.astro';
import Tailwind from '@components/icons/dev/Tailwind.astro';
import type { Technology } from '@interfaces/types';
import AngularIcon from '../icons/dev/AngularIcon.astro';
import AstroIcon from '../icons/dev/AstroIcon.astro';
import CssIcon from '../icons/dev/CssIcon.astro';
import HtmlIcon from '../icons/dev/HtmlIcon.astro';
import JavaScriptIcon from '../icons/dev/JavaScriptIcon.astro';
import MongoIcon from '../icons/dev/MongoIcon.astro';
import NodeIcon from '../icons/dev/NodeIcon.astro';
import ReactIcon from '../icons/dev/ReactIcon.astro';
import ReduxIcon from '../icons/dev/ReduxIcon.astro';
import SassIcon from '../icons/dev/SassIcon.astro';
import TsIcon from '../icons/dev/TsIcon.astro';

interface Props {
  tegnologies: Technology[];
  withIcon?: boolean;
}
const { tegnologies, withIcon } = Astro.props;

const iconShip = {
  HTML: HtmlIcon,
  CSS: CssIcon,
  SASS: SassIcon,
  JavaScript: JavaScriptIcon,
  TypeScript: TsIcon,
  React: ReactIcon,
  'Next.js': NextJS,
  'Node.JS': NodeIcon,
  Astro: AstroIcon,
  Angular: AngularIcon,
  Redux: ReduxIcon,
  MongoDB: MongoIcon,
  PostgreSQL: PostgreSQL,
  Docker: DockerIcon,
  Tailwind: Tailwind
};
---

<ul class="chips">
  {
    tegnologies.map(teg => {
      const IconComponent = iconShip[teg];
      return (
        <li class="chip">
          {withIcon && IconComponent && <IconComponent class="ship__icon" />} {teg}
        </li>
      );
    })
  }
</ul>

<style>
  .chips {
    display: flex;
    gap: 0.6em;
    flex-wrap: wrap;
  }
  .chip {
    padding: 0.3rem 0.6rem;
    border-radius: 0.4rem;
    background-color: rgba(var(--color-button-accent), 0.2);
    border: 1px solid rgba(var(--color), 0.2);

    display: flex;
    gap: 0.2em;
    flex-wrap: wrap;
    align-items: center;
    font-size: 0.75rem;
    text-transform: uppercase;
  }
  .ship__icon {
    width: 1.1rem;
    color: rgba(var(--color), 1);
  }
</style>
